{
  "id": "auth-jwt",
  "name": "Authentication JWT",
  "copyright": "Apache 2.0",
  "short_description": "Handle JWT authentication",
  "vendor": {
    "name": "Ktor",
    "url": "https://ktor.io/"
  },
  "github": "https://github.com/ktorio/ktor/blob/7e78e715cec3ff039cd628f8ff8ce875c35cde4c/ktor-features/ktor-auth-jwt/jvm/src/io/ktor/auth/jwt/JWTAuth.kt",
  "group": "Security",
  "version": "1.5.2",
  "ktor_version": "1.4.0",
  "required_feature_ids": [
    "auth"
  ],
  "documentation": {
    "description": "Ktor supports `JWT` (JSON Web Tokens), which is a mechanism for authenticating JSON-encoded payloads. It is useful to create stateless authenticated APIs in the standard way, since there are client libraries for it in a myriad of languages.\n\nThis plugin will handle Authorization: `Bearer <JWT-TOKEN>`.\n\nKtor has a couple of classes to use the JWT Payload as `Credential` or as `Principal`.\n\n```kotlin\nclass JWTCredential(val payload: Payload) : Credential\nclass JWTPrincipal(val payload: Payload) : Principal\n\n```",
    "usage": "## Configuring server/routes:\n`JWT` and `JWK` each have their own method with slightly different parameters. Both require the realm parameter, which is used in the `WWW-Authenticate` response header.\n## Using a verifier and a validator:\nThe verifier will use the secret to verify the signature to trust the source. You can also check the payload within validate callback to ensure everything is right and to produce a Principal.\n\n### application.conf:\n\n```kotlin\njwt {\n    domain = \"https://jwt-provider-domain/\"\n    audience = \"jwt-audience\"\n    realm = \"ktor sample app\"\n}\n\n```\n### JWT auth:\n\n```kotlin\nval jwtIssuer = environment.config.property(\"jwt.domain\").getString()\nval jwtAudience = environment.config.property(\"jwt.audience\").getString()\nval jwtRealm = environment.config.property(\"jwt.realm\").getString()\n\ninstall(Authentication) {\n    jwt {\n        realm = jwtRealm\n        verifier(makeJwtVerifier(jwtIssuer, jwtAudience))\n        validate { credential ->\n            if (credential.payload.audience.contains(jwtAudience)) JWTPrincipal(credential.payload) else null\n        }\n    }\n}\n\nprivate val algorithm = Algorithm.HMAC256(\"secret\")\nprivate fun makeJwtVerifier(issuer: String, audience: String): JWTVerifier = JWT\n        .require(algorithm)\n        .withAudience(audience)\n        .withIssuer(issuer)\n        .build()\n\n```\n## Using a JWK provider:\n\n```kotlin\nfun AuthenticationPipeline.jwtAuthentication(jwkProvider: JwkProvider, issuer: String, realm: String, validate: (JWTCredential) -> Principal?)\n\n```\n\n```kotlin\nval jwkIssuer = \"https://jwt-provider-domain/\"\nval jwkRealm = \"ktor jwt auth test\"\nval jwkProvider = JwkProviderBuilder(jwkIssuer)\n            .cached(10, 24, TimeUnit.HOURS)\n            .rateLimited(10, 1, TimeUnit.MINUTES)\n            .build()\ninstall(Authentication) {\n    jwt {\n        verifier(jwkProvider, jwkIssuer)\n        realm = jwkRealm\n        validate { credentials ->\n            if (credentials.payload.audience.contains(audience)) JWTPrincipal(credentials.payload) else null\n        }\n    }\n}\n\n```",
    "options": "No options"
  },
  "install_recipe": {
    "install_block": "server/template/auth-jwt/installBlock.kt",
    "imports": [
      "io.ktor.auth.jwt.*",
      "com.auth0.jwt.JWT",
      "com.auth0.jwt.JWTVerifier",
      "com.auth0.jwt.algorithms.Algorithm"
    ],
    "test_imports": [],
    "templates": [
      {
        "position": "application_conf",
        "text": "server/template/auth-jwt/application.conf"
      },
      {
        "position": "application_yaml",
        "text": "server/template/auth-jwt/application.yaml"
      }
    ]
  },
  "dependencies": [
    {
      "group": "io.ktor",
      "artifact": "ktor-auth-jwt",
      "version": "$ktor_version"
    }
  ]
}